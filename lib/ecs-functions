#!/bin/bash
#
# ecs-functions
##
# Shortcut the complicated dependencies between clusters, services, and tasks in the ecs cli

ecs-clusters() {
  # List ECS clusters
  # output includes clusterName,status,activeServicesCount,runningTasksCount,pendingTasksCount
  # if you pass an argument, it'll filter for clusters whose ARN contains your text
  #
  #   $ ecs-clusters test
  #   test-octopus-ecs-cluster  ACTIVE  1  1  0
  #   test1-ecs-cluster        ACTIVE  3  1  0
  #   test3-ecs-cluster        ACTIVE  3  1  0
  #   test2-ecs-cluster        ACTIVE  3  3  0

  local cluster=$(__bma_read_filters $@) # Filter output by arguments (optional)
#  echo "cluster=$cluster"
  aws ecs describe-clusters \
    --clusters $(aws ecs list-clusters --query "clusterArns[?contains(@, \`${cluster}\`) == \`true\`]" --output text) \
    --query "clusters[].[clusterName,status,activeServicesCount,runningTasksCount,pendingTasksCount]" \
    --output text       |
    LC_ALL=C sort -b -k 2|
    columnise
}

ecs-services() {

  # List ECS services
  # output includes serviceName,status,desiredCount,runningCount,pendingCount,createdAt
  #
  # gets all clusters if no filter passed in
  # if you do pass a filter:
  # 1. if your filter is the name of one of your clusters, it will list the services in that cluster (eg ecs-clusters test1 | ecs-services)
  # 2. if your filter is not a cluster name, it will list the services in all clusters whose names match your filter (ie it filters on cluster name not service name)
  # 3. if you do not pass a filter, it will list all services in all clusters
  #
  #   $ ecs-clusters test1|ecs-services
  #   test1-ecs-admin-7URaUr0YGJHi        ACTIVE  0  0  0  2023-09-13T17:16:48.198000+10:00
  #   test1-ecs-public-wEaTAqGXqbpq      ACTIVE  0  0  0  2023-09-13T16:54:54.162000+10:00
  #   test1-ecs-hangfire-YNIo1hlx8rjn  ACTIVE  1  1  0  2023-09-13T16:39:06.218000+10:00

  local filter=$(skim-stdin "$@")
  local cluster_names=$filter
#  check for input that isn't a valid cluster name and use it as a regex...
  if [[ -z "$cluster_names" || "$(aws ecs describe-clusters --clusters $cluster_names --query "failures[].reason" --output text)" == "MISSING" ]]; then
    #echo "cluster not found, using input to search"
    cluster_names=$(ecs-clusters $cluster_names |skim-stdin)
    if [[ -z "$cluster_names" ]]; then
      #echo "no matching cluster, using input as a service filter"
      cluster_names=$(ecs-clusters |skim-stdin)
      service_filter=$filter
    fi
  fi
# echo "cluster_names=$cluster_names"

  local cluster_name
  for cluster_name in $(echo $cluster_names); do  # other scripts don't need this echo??
# echo "cluster_name=$cluster_name"
      aws ecs list-services                               \
        --cluster "$cluster_name"                         \
        --query "
            serviceArns[?contains(@, \`${service_filter}\`) == \`true\`]
            "                                            \
        --output text                                     |
      xargs -d '\t' -I {}  echo {}                        |
      sed 's/.*\///'                                      |
      xargs -I {}                                         \
      aws ecs describe-services                           \
          --cluster $cluster_name                         \
          --services {}                                   \
          --query "
            services[].[
                serviceName,status,desiredCount,runningCount,pendingCount,createdAt
            ]"                                            \
          --output text                                   |
          columnise
#         --query "services[].[serviceName,status,desiredCount,runningCount,pendingCount,taskDefinition,createdAt,deployments[0].createdAt]" \

  done
}

ecs-tasks() {

  # List ECS tasks
  # output includes taskDefinitionArn, createdAt, cpu, memory
  #
  # gets all tasks if no filter passed in
  # if you do pass a filter, it filters on the task name.  All clusters are included (I haven't worked out a way of passing a cluster name AND a filter)
  #
  #   $ ecs-tasks test2
  #   arn:aws:ecs:ap-southeast-2:xxxxxxxxxxxx:task-definition/test2-public:18    2023-09-19T17:51:56.418000+10:00  2048  4096
  #   arn:aws:ecs:ap-southeast-2:xxxxxxxxxxxx:task-definition/test2-admin:20     2023-08-29T10:03:36.956000+10:00  2048  4096
  #   arn:aws:ecs:ap-southeast-2:xxxxxxxxxxxx:task-definition/test2-hangfire:22  2023-09-19T17:11:06.622000+10:00  1024  2048

  local filter=$(skim-stdin "$@")

  for cluster_name in $(ecs-clusters |skim-stdin); do
   #echo "cluster_name=$cluster_name"
      aws ecs describe-tasks            \
        --cluster $cluster_name         \
        --query "
            tasks[?contains(taskDefinitionArn, \`$filter\`) == \`true\`]
            .[taskDefinitionArn, createdAt, cpu, memory]
            "                           \
        --tasks $(                      \
          aws ecs list-tasks            \
            --cluster $cluster_name     \
            --output text               |
            sed 's/.*\///'              \
        )                               \
    --output text                       |
    columnise
  done

#    --query 'tasks[].{createdAt: createdAt,startedAt: startedAt,cpu: cpu,memory: memory,taskDefinitionArn: taskDefinitionArn,ephemeralStorage: ephemeralStorage.sizeInGiB,privateIpv4Address: containers[0].networkInterfaces[0].privateIpv4Address}' \
}